/* Generated By:JavaCC: Do not edit this line. ELParserTokenManager.java */
package com.intrbiz.express.parser;
import com.intrbiz.express.*;
import com.intrbiz.express.operator.*;
import com.intrbiz.express.statement.*;
import java.util.*;

/** Token Manager. */
public class ELParserTokenManager implements ELParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 92:
         return jjStopAtPos(0, 103);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                     kind = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 105)
                     kind = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x2000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4022000000L) != 0L)
            return 0;
         if ((active1 & 0x820L) != 0L)
         {
            jjmatchedKind = 86;
            return 17;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 4;
         if ((active0 & 0x400000000010000L) != 0L)
            return 6;
         if ((active0 & 0x200000800000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 86;
            return 25;
         }
         if ((active0 & 0x8a0154148000L) != 0L || (active1 & 0x17deL) != 0L)
         {
            jjmatchedKind = 86;
            return 32;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 45;
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
            return 1;
         if ((active0 & 0xa80000048000L) != 0L || (active1 & 0x1beaL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x20154900000L) != 0L || (active1 & 0x415L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x140000000L) != 0L || (active1 & 0xfcaL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0xa80000048000L) != 0L || (active1 & 0x1021L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active1 & 0xfc2L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x140000000L) != 0L || (active1 & 0x8L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active1 & 0xf02L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active1 & 0xc0L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active1 & 0xd00L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active1 & 0x202L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active1 & 0x900L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active1 & 0x400L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_1(0x100L, 0x0L);
      case 33:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_1(0x1400000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 94);
      case 37:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_1(0x800000000000000L, 0x0L);
      case 38:
         return jjStartNfaWithStates_1(0, 35, 4);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_1(0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_1(0x1040000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 50);
      case 45:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_1(0x6080000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 10);
      case 47:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_1(0x200000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 78);
      case 59:
         return jjStopAtPos(0, 63);
      case 60:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_1(0x2080000000L, 0x0L);
      case 61:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_1(0x280000L, 0x0L);
      case 62:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_1(0x4020000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 79);
      case 64:
         return jjStopAtPos(0, 77);
      case 91:
         return jjStopAtPos(0, 51);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_1(0x400000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x80000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x8000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x100000L, 0x208L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x820L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x44000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x414L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x110000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x40000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x200000800000L, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x20000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 91);
      case 124:
         return jjStartNfaWithStates_1(0, 33, 45);
      case 125:
         return jjStopAtPos(0, 93);
      case 126:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_1(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 43:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 45:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 60:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 61:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         return jjMoveStringLiteralDfa2_1(active0, 0x1200000L, active1, 0L);
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 38, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x3L);
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(1, 66, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8L);
      case 110:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0xa00000040000L, active1, 0x120L);
      case 113:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(1, 20, 32);
         break;
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 41, 32);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x140000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x800L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x400L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(2, 18, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 43, 32);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000000L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x900L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 47, 32);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(2, 69, 32);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(2, 76, 32);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 45, 32);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2L);
      case 118:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(2, 15, 32);
         break;
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(2, 64, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x800L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(3, 67, 32);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x440L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x200L);
      case 113:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(3, 30, 32);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 32);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_1(4, 70, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_1(active1, 0x100L);
      case 107:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(4, 71, 32);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_1(active1, 0x202L);
      case 116:
         return jjMoveStringLiteralDfa5_1(active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_1(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active1, 0x800L);
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(5, 65, 32);
         return jjMoveStringLiteralDfa6_1(active1, 0x100L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(5, 73, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(6, 74, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(7, 72, 32);
         break;
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(7, 75, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, active1);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(0, 8);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 62 && kind > 39)
                     kind = 39;
                  break;
               case 3:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 38 && kind > 42)
                     kind = 42;
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 34:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 36:
                  if ((0x808400000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 43:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(0, 8);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 46)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 45:
                  if (curChar == 124)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 124)
                     jjAddStates(13, 14);
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 5:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 94 && kind > 46)
                     kind = 46;
                  break;
               case 7:
                  if (curChar == 101 && kind > 84)
                     kind = 84;
                  break;
               case 8:
                  if (curChar == 117)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 69 && kind > 84)
                     kind = 84;
                  break;
               case 12:
                  if (curChar == 85)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(7);
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 83)
                     jjCheckNAdd(11);
                  break;
               case 20:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 108 && kind > 85)
                     kind = 85;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 76 && kind > 85)
                     kind = 85;
                  break;
               case 28:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 42:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if (curChar == 124)
                     jjAddStates(13, 14);
                  break;
               case 46:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 50:
                  if (curChar == 76 && kind > 81)
                     kind = 81;
                  break;
               case 57:
                  if (curChar == 68 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 1;
            return 5;
         }
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 1;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x8L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 123:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xeffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x1000000800000000L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if (curChar == 60)
                     jjCheckNAdd(5);
                  else if (curChar == 35)
                     jjCheckNAdd(2);
                  break;
               case 0:
                  if ((0xeffffff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xfffffff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x1000000800000000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 60)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0xeffffff7ffffffffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4022000000L) != 0L)
            return 0;
         if ((active1 & 0x820L) != 0L)
         {
            jjmatchedKind = 86;
            return 17;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 4;
         if ((active0 & 0x400000000010000L) != 0L)
            return 6;
         if ((active0 & 0x200000800000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 86;
            return 25;
         }
         if ((active0 & 0x8a0154148000L) != 0L || (active1 & 0x17deL) != 0L)
         {
            jjmatchedKind = 86;
            return 32;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 45;
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
            return 1;
         if ((active0 & 0xa80000048000L) != 0L || (active1 & 0x1beaL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x20154900000L) != 0L || (active1 & 0x415L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x140000000L) != 0L || (active1 & 0xfcaL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0xa80000048000L) != 0L || (active1 & 0x1021L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active1 & 0xfc2L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x140000000L) != 0L || (active1 & 0x8L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active1 & 0xf02L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active1 & 0xc0L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active1 & 0xd00L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active1 & 0x202L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active1 & 0x900L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active1 & 0x400L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_3(0x100L, 0x0L);
      case 33:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_3(0x1400000L, 0x0L);
      case 37:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_3(0x800000000000000L, 0x0L);
      case 38:
         return jjStartNfaWithStates_3(0, 35, 4);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_3(0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_3(0x1040000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 50);
      case 45:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_3(0x6080000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 10);
      case 47:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_3(0x200000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 78);
      case 59:
         return jjStopAtPos(0, 63);
      case 60:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_3(0x2080000000L, 0x0L);
      case 61:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_3(0x280000L, 0x0L);
      case 62:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_3(0x4020000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 79);
      case 64:
         return jjStopAtPos(0, 77);
      case 91:
         return jjStopAtPos(0, 51);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_3(0x400000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x80000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x8000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x100000L, 0x208L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x820L);
      case 103:
         return jjMoveStringLiteralDfa1_3(0x44000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x414L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x110000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_3(0x40000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x200000800000L, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa1_3(0x20000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa1_3(0x800000000000L, 0x0L);
      case 124:
         return jjStartNfaWithStates_3(0, 33, 45);
      case 125:
         return jjStopAtPos(0, 92);
      case 126:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_3(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 43:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 45:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 60:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 61:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         return jjMoveStringLiteralDfa2_3(active0, 0x1200000L, active1, 0L);
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 38, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x3L);
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_3(1, 66, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x8000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x8L);
      case 110:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x80000000000L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa2_3(active0, 0xa00000040000L, active1, 0x120L);
      case 113:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_3(1, 20, 32);
         break;
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 41, 32);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x140000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x800L);
      case 120:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x400L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_3(2, 18, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 43, 32);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x140000000L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x900L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x200L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 47, 32);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_3(2, 69, 32);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(2, 76, 32);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 45, 32);
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x2L);
      case 118:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_3(2, 15, 32);
         break;
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_3(2, 64, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x800L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_3(3, 67, 32);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x440L);
      case 111:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x200L);
      case 113:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(3, 30, 32);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(3, 32, 32);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_3(4, 70, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_3(active1, 0x100L);
      case 107:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(4, 71, 32);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_3(active1, 0x202L);
      case 116:
         return jjMoveStringLiteralDfa5_3(active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_3(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_3(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa6_3(active1, 0x800L);
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_3(5, 65, 32);
         return jjMoveStringLiteralDfa6_3(active1, 0x100L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(5, 73, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(6, 74, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_3(active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa7_3(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_3(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(7, 72, 32);
         break;
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(7, 75, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_3(6, 0L, active1);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(0, 8);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 62 && kind > 39)
                     kind = 39;
                  break;
               case 3:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 38 && kind > 42)
                     kind = 42;
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 34:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 36:
                  if ((0x808400000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 43:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(0, 8);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 46)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 45:
                  if (curChar == 124)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 124)
                     jjAddStates(13, 14);
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 5:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 94 && kind > 46)
                     kind = 46;
                  break;
               case 7:
                  if (curChar == 101 && kind > 84)
                     kind = 84;
                  break;
               case 8:
                  if (curChar == 117)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 69 && kind > 84)
                     kind = 84;
                  break;
               case 12:
                  if (curChar == 85)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(7);
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 83)
                     jjCheckNAdd(11);
                  break;
               case 20:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 108 && kind > 85)
                     kind = 85;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 76 && kind > 85)
                     kind = 85;
                  break;
               case 28:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 42:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if (curChar == 124)
                     jjAddStates(13, 14);
                  break;
               case 46:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 50:
                  if (curChar == 76 && kind > 81)
                     kind = 81;
                  break;
               case 57:
                  if (curChar == 68 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 100)
                     kind = 100;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4022000000L) != 0L)
            return 0;
         if ((active1 & 0x820L) != 0L)
         {
            jjmatchedKind = 86;
            return 17;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 4;
         if ((active0 & 0x400000000010000L) != 0L)
            return 6;
         if ((active0 & 0x200000800000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 86;
            return 25;
         }
         if ((active0 & 0x8a0154148000L) != 0L || (active1 & 0x17deL) != 0L)
         {
            jjmatchedKind = 86;
            return 32;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 45;
         return -1;
      case 1:
         if ((active0 & 0x4000000000L) != 0L)
            return 1;
         if ((active0 & 0xa80000048000L) != 0L || (active1 & 0x1beaL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 32;
         }
         if ((active0 & 0x20154900000L) != 0L || (active1 & 0x415L) != 0L)
            return 32;
         return -1;
      case 2:
         if ((active0 & 0x140000000L) != 0L || (active1 & 0xfcaL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0xa80000048000L) != 0L || (active1 & 0x1021L) != 0L)
            return 32;
         return -1;
      case 3:
         if ((active1 & 0xfc2L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x140000000L) != 0L || (active1 & 0x8L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active1 & 0xf02L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active1 & 0xc0L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active1 & 0xd00L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active1 & 0x202L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active1 & 0x900L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active1 & 0x400L) != 0L)
            return 32;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_2(0x100L, 0x0L);
      case 33:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_2(0x1400000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200000000L);
      case 37:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_2(0x800000000000000L, 0x0L);
      case 38:
         return jjStartNfaWithStates_2(0, 35, 4);
      case 40:
         return jjStopAtPos(0, 48);
      case 41:
         return jjStopAtPos(0, 49);
      case 42:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_2(0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_2(0x1040000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 50);
      case 45:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_2(0x6080000000000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 10);
      case 47:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_2(0x200000000000000L, 0xc00000000L);
      case 58:
         return jjStopAtPos(0, 78);
      case 59:
         return jjStopAtPos(0, 63);
      case 60:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_2(0x2080000000L, 0x0L);
      case 61:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_2(0x280000L, 0x0L);
      case 62:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_2(0x4020000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 79);
      case 64:
         return jjStopAtPos(0, 77);
      case 91:
         return jjStopAtPos(0, 51);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x400000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x80000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x8000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x100000L, 0x208L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x820L);
      case 103:
         return jjMoveStringLiteralDfa1_2(0x44000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x414L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x110000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x40000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x200000800000L, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x20000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa1_2(0x800000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 95);
      case 124:
         return jjStartNfaWithStates_2(0, 33, 45);
      case 125:
         return jjStopAtPos(0, 96);
      case 126:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_2(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 42:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      case 43:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 45:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 47:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 60:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 61:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         return jjMoveStringLiteralDfa2_2(active0, 0x1200000L, active1, 0L);
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 38, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x1000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x3L);
      case 102:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(1, 66, 32);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x8L);
      case 110:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0xa00000040000L, active1, 0x120L);
      case 113:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(1, 20, 32);
         break;
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 41, 32);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x80L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x140000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x800L);
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x400L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(2, 18, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 43, 32);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x140000000L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x900L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x200L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 47, 32);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(2, 69, 32);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(2, 76, 32);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 45, 32);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0x2L);
      case 118:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(2, 15, 32);
         break;
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(2, 64, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x800L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(3, 67, 32);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x440L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x200L);
      case 113:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(3, 30, 32);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(3, 32, 32);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_2(4, 70, 32);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_2(active1, 0x100L);
      case 107:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(4, 71, 32);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_2(active1, 0x202L);
      case 116:
         return jjMoveStringLiteralDfa5_2(active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_2(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_2(active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa6_2(active1, 0x800L);
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(5, 65, 32);
         return jjMoveStringLiteralDfa6_2(active1, 0x100L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(5, 73, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_2(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(6, 74, 32);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_2(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(7, 72, 32);
         break;
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(7, 75, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, 0L, active1);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAddStates(0, 8);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 62 && kind > 39)
                     kind = 39;
                  break;
               case 3:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 38 && kind > 42)
                     kind = 42;
                  break;
               case 33:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 34:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 36:
                  if ((0x808400000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 43:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAddStates(0, 8);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 46)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 46)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 45:
                  if (curChar == 124)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 94)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 124)
                     jjAddStates(13, 14);
                  else if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 5:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 94 && kind > 46)
                     kind = 46;
                  break;
               case 7:
                  if (curChar == 101 && kind > 84)
                     kind = 84;
                  break;
               case 8:
                  if (curChar == 117)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 69 && kind > 84)
                     kind = 84;
                  break;
               case 12:
                  if (curChar == 85)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(7);
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 83)
                     jjCheckNAdd(11);
                  break;
               case 20:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 108 && kind > 85)
                     kind = 85;
                  break;
               case 24:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 76 && kind > 85)
                     kind = 85;
                  break;
               case 28:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(32);
                  break;
               case 34:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 35:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 42:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if (curChar == 124)
                     jjAddStates(13, 14);
                  break;
               case 46:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 50:
                  if (curChar == 76 && kind > 81)
                     kind = 81;
                  break;
               case 57:
                  if (curChar == 68 && kind > 83)
                     kind = 83;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 117:
         return jjStopAtPos(0, 107);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x808000000000L & l) != 0L)
                     kind = 106;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x14404410000000L & l) != 0L)
                     kind = 106;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   48, 49, 50, 51, 52, 54, 55, 58, 57, 34, 35, 42, 43, 45, 46, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, "\43\173", "\74\43", null, null, null, null, null, null, "\56", 
"\53", "\55", "\52", "\57", "\144\151\166", "\136", "\45", "\155\157\144", "\75\75", 
"\145\161", "\75\75\75", "\41\75", "\156\145", "\41\75\75", "\76", "\147\164", "\74", 
"\154\164", "\76\75", "\147\164\145\161", "\74\75", "\154\164\145\161", "\174", null, 
"\46", "\176", "\74\74", "\76\76", null, null, "\157\162", null, "\141\156\144", 
"\41", "\156\157\164", null, "\170\157\162", "\50", "\51", "\54", "\133", "\135", 
"\75", "\53\75", "\55\75", "\52\75", "\57\75", "\136\75", "\45\75", "\53\53", 
"\55\55", "\55\76", "\73", "\156\145\167", "\162\145\164\165\162\156", "\151\146", 
"\145\154\163\145", "\151\156", "\146\157\162", "\167\150\151\154\145", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\145\170\160\157\162\164", "\151\156\143\154\165\144\145", 
"\146\165\156\143\164\151\157\156", "\166\141\162", "\100", "\72", "\77", null, null, null, null, null, null, null, 
null, null, null, null, "\173", "\175", "\175", "\42", "\173", "\175", "\43\76", 
null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_EXPRESSION",
   "IN_SCRIPT",
   "IN_MAP",
   "IN_SINGLE_LINE_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "STRINGSTATE",
   "ESCSTATE",
   "HEXSTATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 1, 0, 6, -1, -1, 0, 4, 5, 
   2, 2, -1, 7, 1, -1, 6, 8, -1, 6, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc0fL, 0x2703fc7fffffL, 
};
static final long[] jjtoSkip = {
   0x1f0L, 0x3000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x3000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x8cc00000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[59];
private final int[] jjstateSet = new int[118];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ELParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ELParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 59; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 102)
         {
            jjmatchedKind = 102;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 102)
         {
            jjmatchedKind = 102;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
