options {
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(ELParser)

package com.intrbiz.express.parser;

import com.intrbiz.express.*;
import com.intrbiz.express.operator.*;
import com.intrbiz.express.statement.*;
import java.util.*;

@SuppressWarnings("all")
public final class ELParser {

	public static Function loadFunction(String fn, ExpressContext c, boolean verify) throws ExpressException
	{
		Function f = null;
	    if ("coalesce".equals(fn))
	    {
	      f = new Coalesce();
	    }
	    else if ("dateformat".equals(fn))
	    {
	      f = new DateFormat();
	    }
	    else if ("double".equals(fn))
	    {
	      f = new DoubleCast();
	    }
	    else if ("float".equals(fn))
	    {
	      f = new FloatCast();
	    }
	    else if ("long".equals(fn))
	    {
	      f = new LongCast();
	    }
	    else if ("int".equals(fn))
	    {
	      f = new IntCast();
	    }
	    else if ("byte".equals(fn))
	    {
	      f = new ByteCast();
	    }
	    else if ("string".equals(fn))
	    {
	      f = new StringCast();
	    }
	    else if ("list".equals(fn))
	    {
	      f = new ListCast();
	    }
	    else if ("set".equals(fn))
	    {
	      f = new SetCast();
	    }
	    else if ("map".equals(fn))
	    {
	      f = new MapCast();
	    }
	    else if ("stream".equals(fn))
	    {
	      f = new StreamCast();
	    }
	    else if ("java".equals(fn))
	    {
	      f = new Java();
	    }
	    else if ("getuuid".equals(fn))
	    {
	      f = new GetUUID();
	    }
	    else if ("if".equals(fn))
	    {
	      f = new If();
	    }
	    else if ("instanceof".equals(fn))
	    {
	      f = new InstanceOf();
	    }
	    else if ("isempty".equals(fn))
	    {
	      f = new IsEmpty();
	    }
	    else if ("isnull".equals(fn))
	    {
	      f = new IsNull();
	    }
	    else if ("join".equals(fn))
	    {
	      f = new Join();
	    }
	    else if ("urlencode".equals(fn))
	    {
	      f = new URLEncode();
	    }
	    else if ("urldecode".equals(fn))
	    {
	      f = new URLDecode();
	    }
	    else if ("print".equals(fn))
	    {
	        f = new Print();
	    }
	    else if ("pushfilter".equals(fn))
	    {
	        f = new PushFilter();
	    }
	    else if ("popfilter".equals(fn))
	    {
	        f = new PopFilter();
	    }
	    else if (c != null )
	    {
	        f = c.getCustomFunction( fn );
	    }
	    // validate we could load the function
	    if (f == null)
	    {
	    	if (verify)
	    	{
	    		return new FunctionProxy(fn);
	    	}
	    	else
	    	{
	        	throw new ExpressException("Could not load function: " + fn);
        	}
	    }
    	return f;
    }
    
    private boolean verify = false;
    
    public boolean isVerify()
    {
    	return this.verify;
	}
	
	public ELParser verify()
	{
		this.verify = true;
		return this;
	} 

}

PARSER_END(ELParser)

<DEFAULT> TOKEN:
{
    <NON_EXPRESSION_TEXT : (~["#", "<"])+ | ("#" (~["{", "#"])+) | "#" | ("<" (~["#", "<"])+) | "<" >
  | <START_EXPRESSION    : "#{" > : IN_EXPRESSION
  | <START_SCRIPT        : "<#" > : IN_SCRIPT
}


<IN_EXPRESSION, IN_SCRIPT, IN_MAP> SKIP  : { " " | "\t" | "\n" | "\r" | "\r\n" }
<IN_EXPRESSION, IN_SCRIPT, IN_MAP> TOKEN : 
{ 
    <#DIGITS         : (["0"-"9"])+ > 
  | <DOT             : "." >
  | <ADD             : "+" >
  | <SUB             : "-" >
  | <MUL             : "*" >
  | <DIV             : "/" >
  | <DIV1            : "div" >
  | <POW             : "^" >
  | <MOD             : "%" >
  | <MOD1            : "mod" >
  | <EQ              : "==" >
  | <EQ1             : "eq" >
  | <EQ2             : "===" >
  | <NE              : "!=" >
  | <NE1             : "ne" >
  | <NE2             : "!==" >
  | <GT              : ">" >
  | <GT1             : "gt" >
  | <LT              : "<" >
  | <LT1             : "lt" >
  | <GTEQ            : ">=" >
  | <GTEQ1           : "gteq" >
  | <LTEQ            : "<=" >
  | <LTEQ1           : "lteq" >
  | <BITWISE_OR      : "|" >
  | <BITWISE_XOR     : <BITWISE_OR> <POW> >
  | <BITWISE_AND     : "&" >
  | <BITWISE_NOT     : "~" >
  | <BITSHIFT_LEFT   : "<<" >
  | <BITSHIFT_RIGHT  : ">>" >
  | <BITSHIFT_URIGHT : <BITSHIFT_RIGHT> ">" >
  | <OR              : <BITWISE_OR> <BITWISE_OR> >
  | <OR1             : "or" >
  | <AND             : <BITWISE_AND> <BITWISE_AND> >
  | <AND1            : "and" >
  | <NOT             : "!" >
  | <NOT1            : "not" >
  | <XOR             : <POW> <POW> >
  | <XOR1            : "xor" >
  | <STCOMP          : "(" >
  | <EDCOMP          : ")" >
  | <ARGSEP          : "," >
  | <STARR           : "[" >
  | <EDARR           : "]" >
  | <ASSIGNMENT      : "=" >
  | <ADDASSIGNMENT   : "+=" >
  | <SUBASSIGNMENT   : "-=" >
  | <MULASSIGNMENT   : "*=" >
  | <DIVASSIGNMENT   : "/=" >
  | <POWASSIGNMENT   : "^=" >
  | <MODASSIGNMENT   : "%=" >
  | <INCASSIGNMENT   : "++" >
  | <DECASSIGNMENT   : "--" >
  | <ARROW           : "->" >
  | <STATEMENT       : ";" >
  | <NEW             : "new" >
  | <RETURN          : "return" >
  | <IF              : "if" >
  | <ELSE            : "else" >
  | <IN              : "in" >
  | <FOR             : "for" >
  | <WHILE           : "while" >
  | <BREAK           : "break" >
  | <CONTINUE        : "continue" >
  | <EXPORT          : "export" >
  | <INCLUDE         : "include" >
  | <FUNCTION        : "function" >
  | <VAR             : "var" >
  | <LACTION         : "@" >
  | <COLON           : ":" >
  | <TERNARY         : "?" >
  | <NLINT           : <DIGITS> > 
  | <NLLONG          : <DIGITS> "L" > 
  | <NLFLOAT         : <DIGITS> "." <DIGITS> > 
  | <NLDOUBLE        : <DIGITS> "." <DIGITS> "D" | <DIGITS> "D" > 
  | <LBOOLEAN        : "true" | "TRUE" | "false" | "FALSE" > 
  | <LNULL           : "null" | "NULL" >
  | <LENTITY         : ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
  | <#HEXCHAR        : ["a"-"f","A"-"F","0"-"9"]> 
  | <#ESCAPECHAR     : "\\" ["n","t","b","r","f","\\","'","\"", "/"] > 
  | <#UESCAPECHAR    : "\\u" <HEXCHAR><HEXCHAR><HEXCHAR><HEXCHAR> > 
  | <LSTRING         : "\'" ( (~["\'","\\","\n","\r"]) | <ESCAPECHAR> | <UESCAPECHAR>)* "\'" >
}

<IN_EXPRESSION> TOKEN : 
{
	<STARTMAP        : "{" > : IN_MAP
}

<IN_MAP> TOKEN:
{
    <ENDMAP : "}" >  : IN_EXPRESSION
}

<IN_EXPRESSION> TOKEN :
{
    <END_EXPRESSION  : "}" > : DEFAULT
  | <QUOTE           : "\"" > : STRINGSTATE
}

<IN_SCRIPT> TOKEN : 
{
    <STARTBLOCK      : "{" >
  | <ENDBLOCK        : "}" >
  | <END_SCRIPT      : "#>" > : DEFAULT
}

<IN_SCRIPT> MORE :
{ 
    "//" : IN_SINGLE_LINE_COMMENT
  | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : IN_SCRIPT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/"> : IN_SCRIPT
}

<IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
  <~[]>
}


<STRINGSTATE> MORE  : { "\\" : ESCSTATE }
<STRINGSTATE> TOKEN : { <ENDQUOTE : <QUOTE> > : IN_EXPRESSION | <CHAR : ~["\"","\\"]> }
<ESCSTATE>    TOKEN : { <CNTRLESC : ["\'","\\","/","b","f","n","r","t"]> : STRINGSTATE }
<ESCSTATE>    MORE  : { "u" : HEXSTATE }
<HEXSTATE>    TOKEN : { <#HEX : ["a"-"f","A"-"F","0"-"9"]> | <HEXESC : <HEX><HEX><HEX><HEX> > : STRINGSTATE }


private PlainLiteral readPlainText(ExpressContext c) throws ExpressException :
{
  Token t;
}
{
  t = <NON_EXPRESSION_TEXT>
  { return new PlainLiteral(t.image); }
}

private PlainWriteStatement readPlainWriteStatement(ExpressContext c) throws ExpressException :
{
  Token t;
}
{
  t = <NON_EXPRESSION_TEXT>
  { return new PlainWriteStatement(t.image); }
}

private IntLiteral readIntLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
    t = <NLINT>
    {return new IntLiteral( Integer.parseInt(t.image) );}
}

private LongLiteral readLongLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
    t = <NLLONG>
    {return new LongLiteral( Long.parseLong( t.image.substring( 0, t.image.length() -1 ) ) );}
}

private FloatLiteral readFloatLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
    t = <NLFLOAT>
    {return new FloatLiteral( Float.parseFloat( t.image ) );}
}

private DoubleLiteral readDoubleLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
    t = <NLDOUBLE>
    {return new DoubleLiteral( Double.parseDouble( t.image.substring( 0, t.image.length() -1 ) ) );}
}

private BooleanLiteral readBooleanLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
    t = <LBOOLEAN>
    {return new BooleanLiteral( Boolean.parseBoolean( t.image ) );}
}

private StringLiteral readStringLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
    StringBuilder builder = new StringBuilder();
}
{
    (
        t = <LSTRING>
        {return new StringLiteral( t.image.substring(1, t.image.length() -1), true );}
    ) | 
    (
        <QUOTE> ( getChar(builder) )* <ENDQUOTE>
        { System.out.println("Quote: '" + builder + "'"); return new StringLiteral( builder.toString(), false );}
    )
}

private void getChar(StringBuilder builder) :
{
  Token t;
}
{
  ( 
    t = <CHAR> 
    { builder.append(t.image); }
  ) | 
  (
    t = <CNTRLESC>
    { builder.append(t.image); }
  ) |
  (
    t = <HEXESC>
    { builder.append(t.image); }
  )
}

private NullLiteral readNullLiteral(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
    t = <LNULL>
    {return new NullLiteral();}
}

private String readEntityName(ExpressContext c) throws ExpressException : 
{
    Token t;
}
{
	(
    	t = <LENTITY> |
    	t = <IN>
	)
    { return t.image; }
}

private Entity readEntityLiteral(ExpressContext c) throws ExpressException : 
{
    String en;
}
{
    en = readEntityName(c)
    {return new Entity( en );}
}

private Literal readNumberLiteral(ExpressContext c) throws ExpressException :
{
    Literal l;
}
{
    ( l = readIntLiteral(c) | l = readLongLiteral(c) | l = readFloatLiteral(c) | l = readDoubleLiteral(c) )
    { return l; }
}

private Operator readLiteral(ExpressContext c) throws ExpressException :
{
    Operator l;
}
{
    ( 
        l = readNumberLiteral(c)        | 
        l = readBooleanLiteral(c)       | 
        l = readStringLiteral(c)        | 
        l = readNullLiteral(c)          | 
        l = readEntityLiteral(c)
    )
    { return l; }
}

private Operator readFunction(ExpressContext c) throws ExpressException :
{
    Token ift;
    String fn;
    Function f = null;
    List<Operator> args = new ArrayList<Operator>();
    Map<String,Operator> namedArgs = new TreeMap<String,Operator>();
    Operator a;
    String argName;
}
{
    (
     (
      fn = readEntityName(c) |
      (
       ift = <IF>
       { fn = ift.image; }
      )
     )
     <STCOMP>
     (
          (
              LOOKAHEAD (2)    
              (
                  argName = readEntityName(c)
                  <ASSIGNMENT>
                  a = readExpression(c)
                  { namedArgs.put(argName, a); }
              ) |
              (
                   a = readExpression(c)
                  { args.add(a); }
              )
          )
          (
               <ARGSEP>
               (
                  LOOKAHEAD (2)
                  (
                      argName = readEntityName(c)
                      <ASSIGNMENT>
                      a = readExpression(c)
                      { namedArgs.put(argName, a); }
                  ) |
                  (
                       a = readExpression(c)
                      { args.add(a); }
                  )
              )
          )*
     )?
     <EDCOMP>
    )
    {
    	f = loadFunction(fn, c, this.verify);
    	f.setParameters(args);
    	f.setNamedParameters(namedArgs);
    	return f;
    }
}

private Operator readAction(ExpressContext c) throws ExpressException :
{
    String an;
    List<Operator> args = new LinkedList<Operator>();
    Map<String, Operator> namedArgs = new HashMap<String, Operator>();
    String argName;
    Operator a;
}
{
    (
        <LACTION>
        an = readEntityName(c)
        <STCOMP>
        (
              (
                  LOOKAHEAD (2)    
                  (
                      argName = readEntityName(c)
                      <ASSIGNMENT>
                      a = readExpression(c)
                      { namedArgs.put(argName, a); }
                  ) |
                  (
                       a = readExpression(c)
                      { args.add(a); }
                  )
              )
              (
                   <ARGSEP>
                   (
                      LOOKAHEAD (2)
                      (
                          argName = readEntityName(c)
                          <ASSIGNMENT>
                          a = readExpression(c)
                          { namedArgs.put(argName, a); }
                      ) |
                      (
                           a = readExpression(c)
                          { args.add(a); }
                      )
                  )
              )*
         )?
        <EDCOMP>
    )
    {
        return new ActionOperator(an, args, namedArgs);
    }
}

private Operator readComplex(ExpressContext c) throws ExpressException :
{
    Operator p;
}
{
	<STCOMP>
    p = readExpression(c) 
    <EDCOMP>
    { return new Complex(p); }
}

private Operator readNewList(ExpressContext c) throws ExpressException :
{
	ListLiteral l = new ListLiteral();
    Operator e;
}
{
	<STARR>
	(
		e = readExpression(c)
		{ l.addElement(e); }
	)?
	(
		<ARGSEP>
		e = readExpression(c)
		{ l.addElement(e); }
	)*
	<EDARR>
    { return l; }
}

private Operator readNewMap(ExpressContext c) throws ExpressException :
{
	MapLiteral l = new MapLiteral();
	StringLiteral sl;
	String k;
    Operator e;
}
{
	(<STARTMAP> | <STARTBLOCK>)
	(
		(
			(
				(
					k = readEntityName(c)
				) |
				(
					sl = readStringLiteral(c)
					{ k = sl.getValue(); }
				)
			)
			<COLON>
			e = readExpression(c)
		)
		{ l.putElement(k, e); }
	)?
	(
		<ARGSEP>
		(
			(
				(
					k = readEntityName(c)
				) |
				(
					sl = readStringLiteral(c)
					{ k = sl.getValue(); }
				)
			)
			<COLON>
			e = readExpression(c)
		)
		{ l.putElement(k, e); }
	)*
	(<ENDMAP> | <ENDBLOCK>)
    { return l; }
}

private Operator readNew(ExpressContext c) throws ExpressException :
{
    StringBuilder name = new StringBuilder();
    String cn;
    List<Operator> args = new LinkedList<Operator>();
    Operator a;
}
{
    (<NEW>
     cn = readEntityName(c)
     { name.append(cn); }
     (<DOT>
      cn = readEntityName(c)
      { name.append(".").append(cn); })*
     <STCOMP>
     (a = readExpression(c)
      { args.add(a); }
      (<ARGSEP>
       a = readExpression(c)
       { args.add(a); })*)?
     <EDCOMP>)
    { return new NewObject(name.toString(), args); }
}

private Operator readValue(ExpressContext c) throws ExpressException : 
{
    Operator v;
}
{
    v = readValuePrefix(c)
    (
        LOOKAHEAD(2)
    	v = readValueSuffix(c,v)
    )*
    { return v; }
}

private Operator readValuePrefix(ExpressContext c) throws ExpressException :
{
    Operator p;
}
{
    (
    	LOOKAHEAD(readComplex(c))   p = readComplex(c)  |
    	LOOKAHEAD(readNewList(c))   p = readNewList(c)  |
    	LOOKAHEAD(readNewMap(c))    p = readNewMap(c)   |
    	LOOKAHEAD(readNew(c))       p = readNew(c)   |
        LOOKAHEAD(readAction(c))    p = readAction(c)   |
        LOOKAHEAD(readFunction(c))  p = readFunction(c) |
        LOOKAHEAD(readLiteral(c))   p = readLiteral(c)
    )
    { return p; }
}

private Operator readValueSuffix(ExpressContext c, Operator l) throws ExpressException :
{
    Operator o;
}
{
    (
    	LOOKAHEAD(readMethodInvoke(c,l)) o = readMethodInvoke(c,l)   | 
                                         o = readPropertyInvoke(c,l) | 
                                         o = readArrayInvoke(c,l)
    )
    { return o; }
}

private Operator readPropertyInvoke(ExpressContext c, Operator l) throws ExpressException :
{
    String name;
}
{
    <DOT>
    name = readEntityName(c)
    { return new PropertyInvoke(l, name); }
}

private Operator readArrayInvoke(ExpressContext c, Operator l) throws ExpressException :
{
    Operator r;
}
{
    <STARR>
    r = readExpression(c)
    <EDARR>
    { return new ArrayInvoke(l,r); }
}

private Operator readMethodInvoke(ExpressContext c, Operator l) throws ExpressException :
{
    String name;
    List<Operator> args = new LinkedList<Operator>();
    Map<String,Operator> namedArgs = new TreeMap<String,Operator>();
    Operator a;
    String argName;
}
{
    (
        <DOT>
        name = readEntityName(c)
        <STCOMP>
        (
              (
                  LOOKAHEAD (2)    
                  (
                      argName = readEntityName(c)
                      <ASSIGNMENT>
                      a = readExpression(c)
                      { namedArgs.put(argName, a); }
                  ) |
                  (
                       a = readExpression(c)
                      { args.add(a); }
                  )
              )
              (
                   <ARGSEP>
                   (
                      LOOKAHEAD (2)
                      (
                          argName = readEntityName(c)
                          <ASSIGNMENT>
                          a = readExpression(c)
                          { namedArgs.put(argName, a); }
                      ) |
                      (
                           a = readExpression(c)
                          { args.add(a); }
                      )
                  )
              )*
         )?
        <EDCOMP>
    )
    {
        return new MethodInvoke(l, name, args, namedArgs);
    }
}

private Operator readUnary(ExpressContext c) throws ExpressException :
{
    Operator o;
}
{
	(
	  (
	  	(<NOT> | <NOT1>)
	   	o = readUnary(c)
	   	{ o = new LogicalNot(o); }
	  ) | 
	  (
	  	<BITWISE_NOT>
	   	o = readUnary(c)
	   	{ o = new BitwiseNot(o); }
	  )| 
	  (
	  	<SUB>
	   	o = readUnary(c)
	   	{ o = new Sub(null, o); }
	  ) |
	  (
	  	o = readValue(c)
	  )
    )
    { return o; }
}

private Operator readLambda(ExpressContext c) throws ExpressException :
{
    Token arg;
    List<String> args = new LinkedList<String>();
    StatementBlock blk = null;
    Operator op = null;
}
{
    (
        <STCOMP>
        (
            arg = <LENTITY>
            { args.add(arg.image); }
        )?
        (
            <ARGSEP>
            arg = <LENTITY>
            { args.add(arg.image); }
        )*
        <EDCOMP>
        <ARROW>
        (
        	LOOKAHEAD(3)
            (
                (<STARTMAP> | <STARTBLOCK>)
                blk = readStatements(c)
                (<ENDMAP> | <ENDBLOCK>)
            ) |
            (
                op = readTernary(c)
            )
        )
    )
    { return new Lambda(args, blk, op); }
}

private Operator readFunctionReference(ExpressContext c) throws ExpressException :
{
    Token name;
}
{
    (
		<COLON>
		<COLON>
        name = <LENTITY>
    )
    {
    	// validate the function exists at parse time, even though we don't use it right now.
    	loadFunction(name.image, c, this.verify); 
    	return new FunctionReference(name.image); 
    }
}

Operator readExpression(ExpressContext c) throws ExpressException :
{
    Operator o;
}
{
    (
    	LOOKAHEAD(readFunctionReference(c)) o = readFunctionReference(c) |
        LOOKAHEAD(readLambda(c))            o = readLambda(c)            |
        LOOKAHEAD(readAssignment(c))        o = readAssignment(c)        |
                                            o = readTernary(c)
    )
    { return o; }
}

Operator readWrappedExpression(ExpressContext c) throws ExpressException :
{
    Operator o;
}
{
    <START_EXPRESSION> 
    o = readExpression(c)
    <END_EXPRESSION>
    { return new Wrapped(o); }
}

Operator readFullExpression(ExpressContext c) throws ExpressException :
{
    Operator op = null;
    ConcatOperator cat = null;
    Operator ret = null;
}
{
    (
        (op = readPlainText(c) | op = readWrappedExpression(c))
        {
            if (ret == null)
            {
                ret = op;
            }
            else
            {
                if (cat == null)
                {
                    cat = new ConcatOperator(ret);
                    ret = cat;
                }
                cat.addOperator(op);
            }
        }
    )*
    {
        return ret;
    }
}

private Operator readTernary(ExpressContext c) throws ExpressException :
{
    Operator o;
    Operator m;
    Operator a;
}
{
	(
  	  o = readXorExpression(c)
	  (
	    (
	  	  <TERNARY>
	  	  m = readTernary(c)
	  	  <COLON>
	  	  a = readTernary(c)
	  	)
	  	{ o = new Ternary(o, m, a); }
	  )?
    )
    { return o; }
}

private Operator readAssignment(ExpressContext c) throws ExpressException :
{
    Operator l;
    String e;
    Operator r;
}
{
    (
    	(
    		(
    			l = readTernary(c)
			) |
			(
				<VAR>
				e = readEntityName(c)
				{ l = new Var(e); }
			)
		)
     	(
      		(
      			<INCASSIGNMENT>
       			{ l = new Assignment(l, new Add(l, new IntLiteral(1))); }
   			) |
      		(
      			<DECASSIGNMENT>
       			{ l = new Assignment(l, new Sub(l, new IntLiteral(1))); }
   			) |
      		(
      			<ASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, r); }
   			) |
      		(
      			<POWASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, new Pow(l, r)); }
   			) |
      		(
      			<DIVASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, new Div(l, r)); }
   			) |
      		(
      			<MULASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, new Mul(l, r)); }
   			) |
      		(
      			<MODASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, new Mod(l, r)); }
   			) |
      		(
      			<ADDASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, new Add(l, r)); }
   			) |
      		(
      			<SUBASSIGNMENT>
       			r = readTernary(c)
       			{ l = new Assignment(l, new Sub(l, r)); }
   			)
     	)?
    )
    { return l; }
}

private Operator readXorExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (
      l = readOrExpression(c)
      (
     	(<XOR> | <XOR1>)
      	r = readOrExpression(c)
      	{ l = new LogicalXor(l, r); }
      )*
    )
    { return l; }
}

private Operator readOrExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (
      l = readAndExpression(c)
      (
     	(<OR> | <OR1>)
      	r = readAndExpression(c)
      	{ l = new LogicalOr(l, r); }
      )*
    )
    { return l; }
}

private Operator readAndExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readBitwiseOrExpression(c)
      ((<AND> | <AND1>)
       r = readBitwiseOrExpression(c)
       {l = new LogicalAnd(l,r); }
      )*)
    { return l; }
}

private Operator readBitwiseOrExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readBitwiseXorExpression(c)
     (<BITWISE_OR>
      r = readBitwiseXorExpression(c)
      { l = new BitwiseOr(l, r); }
     )*)
    { return l; }
}

private Operator readBitwiseXorExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readBitwiseAndExpression(c)
     (<BITWISE_XOR>
      r = readBitwiseAndExpression(c)
      { l = new BitwiseXor(l, r); }
     )*)
    { return l; }
}

private Operator readBitwiseAndExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readEqualityExpression(c)
     (<BITWISE_AND>
      r = readEqualityExpression(c)
      { l = new BitwiseAnd(l, r); }
     )*)
    { return l; }
}

private Operator readEqualityExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (
     l = readCompareExpression(c)
     (
      (
       (<EQ> | <EQ1> | <EQ2>)
       r = readCompareExpression(c)
       { l = new Equals(l,r); }
      )
      |
      (
       (<NE> | <NE1> | <NE2>)
       r = readCompareExpression(c)
       { l = new NotEquals(l,r); }
      )
     )*
    )
    { return l; }
}

private Operator readCompareExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readBitShiftExpression(c)
      (
    ((<GT> | <GT1>)
     r = readBitShiftExpression(c)
     { l = new GT(l,r); })
    |((<LT> | <LT1>)
     r = readBitShiftExpression(c)
     { l = new LT(l,r); })
    |((<GTEQ> | <GTEQ1>)
     r = readBitShiftExpression(c)
     { l = new GTEQ(l,r); })
    |((<LTEQ> | <LTEQ1>)
     r = readBitShiftExpression(c)
     { l = new LTEQ(l,r); })
      )*)
    { return l; }
}

private Operator readBitShiftExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readAddExpression(c)
      (
         (<BITSHIFT_LEFT>
           r = readAddExpression(c)
           { l = new BitshiftLeft(l,r); })
        |(<BITSHIFT_RIGHT>
           r = readAddExpression(c)
           { l = new BitshiftRight(l,r); })
        |(<BITSHIFT_URIGHT>
           r = readAddExpression(c)
           { l = new BitshiftUnsignedRight(l,r); })
      )*
    )
    { return l; }
}

private Operator readAddExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readMulExpression(c)
      (
         LOOKAHEAD(2)
         (
	         (<ADD>
	           r = readMulExpression(c)
	           { l = new Add(l,r); })
	        |(<SUB>
	           r = readMulExpression(c)
	           { l = new Sub(l,r); })
        )
      )*
    )
    { return l; }
}

private Operator readMulExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    (l = readPowExpression(c)
      ( 
    (<MUL>
      r = readPowExpression(c)
      { l = new Mul(l,r); })
    |((<DIV> | <DIV1>)
      r = readPowExpression(c)
      { l = new Div(l,r); })
    |(<MOD>
      r = readPowExpression(c)
      { l = new Mod(l,r); })
      )*)
    { return l; }
}

private Operator readPowExpression(ExpressContext c) throws ExpressException :
{
    Operator l;
    Operator r;
}
{
    ( l = readUnary(c)
      ( 
    <POW>
     r = readUnary(c)
     { l = new Pow(l,r); }
      )*)
    { return l; }
}




StatementBlock readFullStatements(ExpressContext c) throws ExpressException :
{
    StatementBlock ret = new StatementBlock();
    Operator op;
    StatementBlock bl;
    PlainWriteStatement pls;
}
{
    (
        (
            pls = readPlainWriteStatement(c)
            { ret.getStatements().add(pls); }
        ) |
        (
            op = readWrappedExpression(c)
            { ret.getStatements().add(new WriteStatement(op)); }
        ) | 
        (
            bl = readWrappedStatements(c)
            { ret.getStatements().add(bl); }
        )
    )*
    {
        return ret;
    }
}

StatementBlock readWrappedStatements(ExpressContext c) throws ExpressException :
{
    StatementBlock r = new StatementBlock(true);
    Statement s;
}
{
    <START_SCRIPT> 
    (
        (
            s = readStatement(c)
            { r.getStatements().add(s); }
        )
    )*
    <END_SCRIPT>
    { return r; }
}

StatementBlock readStatements(ExpressContext c) throws ExpressException :
{
    StatementBlock r = new StatementBlock(false);
    Statement s;
    Operator op;
    PlainWriteStatement pls;
}
{ 
    (
        (
            s = readStatement(c)
            { r.getStatements().add(s); }
        ) |
        (
            <END_SCRIPT>
            (
                (
                    pls = readPlainWriteStatement(c)
                    { r.getStatements().add(pls); }
                ) |
                (
                    op = readWrappedExpression(c)
                    { r.getStatements().add(new WriteStatement(op)); }
                )
            )*
            <START_SCRIPT>
        )
    )*
    { return r; }
}

private Statement readStatement(ExpressContext c) throws ExpressException :
{
    Statement s;
}
{
    (
    	LOOKAHEAD(readIfStatement(c))      s = readIfStatement(c)      |
     	LOOKAHEAD(readForEachStatement(c)) s = readForEachStatement(c) |
     	LOOKAHEAD(readForStatement(c))     s = readForStatement(c)     |
     	LOOKAHEAD(readWhileStatement(c))   s = readWhileStatement(c)   |
     	s = readBreakStatement(c)                                      |
     	s = readContinueStatement(c)                                      |
     	s = readReturnStatement(c)                                     |
     	s = readExportStatement(c)                                     |
     	s = readIncludeStatement(c)                                    |
     	s = readFunctionStatement(c)                                   |
     	s = readDefaultStatement(c)
    )
    { return s; }
}

private Statement readIfStatement(ExpressContext c) throws ExpressException :
{
    StatementBlock tb;
    StatementBlock fb = null;
    StatementBlock eib;
    Statement st;
    Operator eit;
    List<IfStatement.ElseIfStatement> eis = new LinkedList<IfStatement.ElseIfStatement>();
    Operator t;
}
{
    <IF>
    <STCOMP>
    t = readExpression(c)
    <EDCOMP>
    (
        LOOKAHEAD(3)
    	(
    		(<STARTMAP> | <STARTBLOCK>)
	    	tb = readStatements(c)
		    (<ENDMAP> | <ENDBLOCK>)
		) |
		(
			st = readStatement(c)
			{ tb = new StatementBlock(st); }
		)
	)
    (
    	LOOKAHEAD(2)
    	<ELSE>
     	<IF>
	    <STCOMP>
     	eit = readExpression(c)
     	<EDCOMP>
     	(
	     	LOOKAHEAD(3)
	     	(
	     		(<STARTMAP> | <STARTBLOCK>)
	     		eib = readStatements(c)
	     		(<ENDMAP> | <ENDBLOCK>)
	     	) |
			(
				st = readStatement(c)
				{ eib = new StatementBlock(st); }
			)
		)
     	{ eis.add(new IfStatement.ElseIfStatement(eit, eib)); }
    )*
    (
	    LOOKAHEAD(2)
    	<ELSE>
    	(
	    	LOOKAHEAD(3)
    		(
     			(<STARTMAP> | <STARTBLOCK>)
	     		fb = readStatements(c)
    	 		(<ENDMAP> | <ENDBLOCK>)
    	 	) |
    	 	(
	    	 	st = readStatement(c)
				{ fb = new StatementBlock(st); }
    	 	)
     	)
    )?
    { return new IfStatement(t, tb, eis, fb); }
}

private Statement readWhileStatement(ExpressContext c) throws ExpressException :
{
    Operator t;
    StatementBlock b;
}
{
    <WHILE>
    <STCOMP>
    t = readExpression(c)
    <EDCOMP>
    (<STARTMAP> | <STARTBLOCK>)
    b = readStatements(c)
    (<ENDMAP> | <ENDBLOCK>)
    { return new WhileStatement(t,b); }
}

private Statement readForStatement(ExpressContext c) throws ExpressException :
{
    StatementBlock b;
    Operator a;
    Operator t;
    Operator i;
}
{
    <FOR>
    <STCOMP>
    a = readAssignment(c)
    <STATEMENT>
    t = readExpression(c)
    <STATEMENT>
    i = readAssignment(c)
    <EDCOMP>
    (<STARTMAP> | <STARTBLOCK>)
    b = readStatements(c)
    (<ENDMAP> | <ENDBLOCK>)
    { return new ForStatement(a, t, i, b); }
}

private Statement readForEachStatement(ExpressContext c) throws ExpressException :
{
    StatementBlock blk;
    String var;
    Operator col;
}
{
    <FOR>
    <STCOMP>
    var = readEntityName(c)
    (<IN> | <COLON>)
    col = readExpression(c)
    <EDCOMP>
    (<STARTMAP> | <STARTBLOCK>)
    blk = readStatements(c)
    (<ENDMAP> | <ENDBLOCK>)
    { return new ForEachStatement(var, col, blk); }
}

private Statement readFunctionStatement(ExpressContext c) throws ExpressException :
{
    StatementBlock blk;
    Token name;
    Token arg;
    List<String> args = new LinkedList<String>();
}
{
    <FUNCTION>
    name = <LENTITY>
    <STCOMP>
    (
        arg = <LENTITY>
        { args.add(arg.image); }
    )?
    (
        <ARGSEP>
        arg = <LENTITY>
        { args.add(arg.image); }
    )*
    <EDCOMP>
    (<STARTMAP> | <STARTBLOCK>)
    blk = readStatements(c)
    (<ENDMAP> | <ENDBLOCK>)
    {
        FunctionStatement func = new FunctionStatement(name.image, args, blk);
        func.register(c);
        return func;
    }
}

private IncludeStatement readIncludeStatement(ExpressContext c) throws ExpressException :
{
    Operator o;
}
{
    <INCLUDE>
    o = readExpression(c)
    <STATEMENT>
    { return new IncludeStatement(o); }
}

private Statement readDefaultStatement(ExpressContext c) throws ExpressException :
{
    Operator o = null;
}
{
    (
    	o = readExpression(c)
    )?
    <STATEMENT>
    { return new DefaultStatement(o); }
}

private Statement readBreakStatement(ExpressContext c) throws ExpressException :
{
}
{
    <BREAK>
    <STATEMENT>
    { return new BreakStatement(); }
}

private Statement readContinueStatement(ExpressContext c) throws ExpressException :
{
}
{
    <CONTINUE>
    <STATEMENT>
    { return new ContinueStatement(); }
}

private Statement readReturnStatement(ExpressContext c) throws ExpressException :
{
    Operator o = null;
}
{
    <RETURN>
    (
    	o = readExpression(c)
	)?
    <STATEMENT>
    { return new ReturnStatement(o); }
}

private Statement readExportStatement(ExpressContext c) throws ExpressException :
{
    String varName;
}
{
    <EXPORT>
    varName = readEntityName(c)
    <STATEMENT>
    { return new ExportStatement(varName); }
}
