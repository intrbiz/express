/* Generated By:JavaCC: Do not edit this line. ELParser.java */
package com.intrbiz.express.parser;

import com.intrbiz.express.*;
import com.intrbiz.express.operator.*;
import com.intrbiz.express.statement.*;
import java.util.*;

@SuppressWarnings("all")
public final class ELParser implements ELParserConstants {

        public static Function loadFunction(String fn, ExpressContext c, boolean verify) throws ExpressException
        {
                Function f = null;
            if ("coalesce".equals(fn))
            {
              f = new Coalesce();
            }
            else if ("dateformat".equals(fn))
            {
              f = new DateFormat();
            }
            else if ("double".equals(fn))
            {
              f = new DoubleCast();
            }
            else if ("float".equals(fn))
            {
              f = new FloatCast();
            }
            else if ("long".equals(fn))
            {
              f = new LongCast();
            }
            else if ("int".equals(fn))
            {
              f = new IntCast();
            }
            else if ("byte".equals(fn))
            {
              f = new ByteCast();
            }
            else if ("string".equals(fn))
            {
              f = new StringCast();
            }
            else if ("list".equals(fn))
            {
              f = new ListCast();
            }
            else if ("set".equals(fn))
            {
              f = new SetCast();
            }
            else if ("map".equals(fn))
            {
              f = new MapCast();
            }
            else if ("stream".equals(fn))
            {
              f = new StreamCast();
            }
            else if ("java".equals(fn))
            {
              f = new Java();
            }
            else if ("getuuid".equals(fn))
            {
              f = new GetUUID();
            }
            else if ("if".equals(fn))
            {
              f = new If();
            }
            else if ("instanceof".equals(fn))
            {
              f = new InstanceOf();
            }
            else if ("isempty".equals(fn))
            {
              f = new IsEmpty();
            }
            else if ("isnull".equals(fn))
            {
              f = new IsNull();
            }
            else if ("join".equals(fn))
            {
              f = new Join();
            }
            else if ("urlencode".equals(fn))
            {
              f = new URLEncode();
            }
            else if ("urldecode".equals(fn))
            {
              f = new URLDecode();
            }
            else if ("print".equals(fn))
            {
                f = new Print();
            }
            else if ("pushfilter".equals(fn))
            {
                f = new PushFilter();
            }
            else if ("popfilter".equals(fn))
            {
                f = new PopFilter();
            }
            else if (c != null )
            {
                f = c.getCustomFunction( fn );
            }
            // validate we could load the function
            if (f == null)
            {
                if (verify)
                {
                        return new FunctionProxy(fn);
                }
                else
                {
                        throw new ExpressException("Could not load function: " + fn);
                }
            }
        return f;
    }

    private boolean verify = false;

    public boolean isVerify()
    {
        return this.verify;
        }

        public ELParser verify()
        {
                this.verify = true;
                return this;
        }

  final private PlainLiteral readPlainText(ExpressContext c) throws ParseException, ExpressException {
  Token t;
    t = jj_consume_token(NON_EXPRESSION_TEXT);
    {if (true) return new PlainLiteral(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private PlainWriteStatement readPlainWriteStatement(ExpressContext c) throws ParseException, ExpressException {
  Token t;
    t = jj_consume_token(NON_EXPRESSION_TEXT);
    {if (true) return new PlainWriteStatement(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private IntLiteral readIntLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    t = jj_consume_token(NLINT);
     {if (true) return new IntLiteral( Integer.parseInt(t.image) );}
    throw new Error("Missing return statement in function");
  }

  final private LongLiteral readLongLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    t = jj_consume_token(NLLONG);
     {if (true) return new LongLiteral( Long.parseLong( t.image.substring( 0, t.image.length() -1 ) ) );}
    throw new Error("Missing return statement in function");
  }

  final private FloatLiteral readFloatLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    t = jj_consume_token(NLFLOAT);
     {if (true) return new FloatLiteral( Float.parseFloat( t.image ) );}
    throw new Error("Missing return statement in function");
  }

  final private DoubleLiteral readDoubleLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    t = jj_consume_token(NLDOUBLE);
     {if (true) return new DoubleLiteral( Double.parseDouble( t.image.substring( 0, t.image.length() -1 ) ) );}
    throw new Error("Missing return statement in function");
  }

  final private BooleanLiteral readBooleanLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    t = jj_consume_token(LBOOLEAN);
     {if (true) return new BooleanLiteral( Boolean.parseBoolean( t.image ) );}
    throw new Error("Missing return statement in function");
  }

  final private StringLiteral readStringLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    StringBuilder builder = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSTRING:
      t = jj_consume_token(LSTRING);
         {if (true) return new StringLiteral( t.image.substring(1, t.image.length() -1), true );}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
        case CNTRLESC:
        case HEXESC:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        getChar(builder);
      }
      jj_consume_token(ENDQUOTE);
          System.out.println("Quote: '" + builder + "'"); {if (true) return new StringLiteral( builder.toString(), false );}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private void getChar(StringBuilder builder) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      t = jj_consume_token(CHAR);
      builder.append(t.image);
      break;
    case CNTRLESC:
      t = jj_consume_token(CNTRLESC);
      builder.append(t.image);
      break;
    case HEXESC:
      t = jj_consume_token(HEXESC);
      builder.append(t.image);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private NullLiteral readNullLiteral(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    t = jj_consume_token(LNULL);
     {if (true) return new NullLiteral();}
    throw new Error("Missing return statement in function");
  }

  final private String readEntityName(ExpressContext c) throws ParseException, ExpressException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENTITY:
      t = jj_consume_token(LENTITY);
      break;
    case IN:
      t = jj_consume_token(IN);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final private Entity readEntityLiteral(ExpressContext c) throws ParseException, ExpressException {
    String en;
    en = readEntityName(c);
     {if (true) return new Entity( en );}
    throw new Error("Missing return statement in function");
  }

  final private Literal readNumberLiteral(ExpressContext c) throws ParseException, ExpressException {
    Literal l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NLINT:
      l = readIntLiteral(c);
      break;
    case NLLONG:
      l = readLongLiteral(c);
      break;
    case NLFLOAT:
      l = readFloatLiteral(c);
      break;
    case NLDOUBLE:
      l = readDoubleLiteral(c);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readLiteral(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
      l = readNumberLiteral(c);
      break;
    case LBOOLEAN:
      l = readBooleanLiteral(c);
      break;
    case LSTRING:
    case QUOTE:
      l = readStringLiteral(c);
      break;
    case LNULL:
      l = readNullLiteral(c);
      break;
    case IN:
    case LENTITY:
      l = readEntityLiteral(c);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readFunction(ExpressContext c) throws ParseException, ExpressException {
    Token ift;
    String fn;
    Function f = null;
    List<Operator> args = new ArrayList<Operator>();
    Map<String,Operator> namedArgs = new TreeMap<String,Operator>();
    Operator a;
    String argName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case LENTITY:
      fn = readEntityName(c);
      break;
    case IF:
      ift = jj_consume_token(IF);
         fn = ift.image;
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(STCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      if (jj_2_1(2)) {
        argName = readEntityName(c);
        jj_consume_token(ASSIGNMENT);
        a = readExpression(c);
                    namedArgs.put(argName, a);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUB:
        case BITWISE_NOT:
        case NOT:
        case NOT1:
        case STCOMP:
        case STARR:
        case NEW:
        case IF:
        case IN:
        case VAR:
        case LACTION:
        case COLON:
        case NLINT:
        case NLLONG:
        case NLFLOAT:
        case NLDOUBLE:
        case LBOOLEAN:
        case LNULL:
        case LENTITY:
        case LSTRING:
        case STARTMAP:
        case QUOTE:
        case STARTBLOCK:
          a = readExpression(c);
                    args.add(a);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGSEP:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        jj_consume_token(ARGSEP);
        if (jj_2_2(2)) {
          argName = readEntityName(c);
          jj_consume_token(ASSIGNMENT);
          a = readExpression(c);
                        namedArgs.put(argName, a);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUB:
          case BITWISE_NOT:
          case NOT:
          case NOT1:
          case STCOMP:
          case STARR:
          case NEW:
          case IF:
          case IN:
          case VAR:
          case LACTION:
          case COLON:
          case NLINT:
          case NLLONG:
          case NLFLOAT:
          case NLDOUBLE:
          case LBOOLEAN:
          case LNULL:
          case LENTITY:
          case LSTRING:
          case STARTMAP:
          case QUOTE:
          case STARTBLOCK:
            a = readExpression(c);
                        args.add(a);
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(EDCOMP);
        f = loadFunction(fn, c, this.verify);
        f.setParameters(args);
        f.setNamedParameters(namedArgs);
        {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readAction(ExpressContext c) throws ParseException, ExpressException {
    String an;
    List<Operator> args = new LinkedList<Operator>();
    Map<String, Operator> namedArgs = new HashMap<String, Operator>();
    String argName;
    Operator a;
    jj_consume_token(LACTION);
    an = readEntityName(c);
    jj_consume_token(STCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      if (jj_2_3(2)) {
        argName = readEntityName(c);
        jj_consume_token(ASSIGNMENT);
        a = readExpression(c);
                        namedArgs.put(argName, a);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUB:
        case BITWISE_NOT:
        case NOT:
        case NOT1:
        case STCOMP:
        case STARR:
        case NEW:
        case IF:
        case IN:
        case VAR:
        case LACTION:
        case COLON:
        case NLINT:
        case NLLONG:
        case NLFLOAT:
        case NLDOUBLE:
        case LBOOLEAN:
        case LNULL:
        case LENTITY:
        case LSTRING:
        case STARTMAP:
        case QUOTE:
        case STARTBLOCK:
          a = readExpression(c);
                        args.add(a);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGSEP:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        jj_consume_token(ARGSEP);
        if (jj_2_4(2)) {
          argName = readEntityName(c);
          jj_consume_token(ASSIGNMENT);
          a = readExpression(c);
                            namedArgs.put(argName, a);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUB:
          case BITWISE_NOT:
          case NOT:
          case NOT1:
          case STCOMP:
          case STARR:
          case NEW:
          case IF:
          case IN:
          case VAR:
          case LACTION:
          case COLON:
          case NLINT:
          case NLLONG:
          case NLFLOAT:
          case NLDOUBLE:
          case LBOOLEAN:
          case LNULL:
          case LENTITY:
          case LSTRING:
          case STARTMAP:
          case QUOTE:
          case STARTBLOCK:
            a = readExpression(c);
                            args.add(a);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(EDCOMP);
        {if (true) return new ActionOperator(an, args, namedArgs);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readComplex(ExpressContext c) throws ParseException, ExpressException {
    Operator p;
    jj_consume_token(STCOMP);
    p = readExpression(c);
    jj_consume_token(EDCOMP);
      {if (true) return new Complex(p);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readNewList(ExpressContext c) throws ParseException, ExpressException {
        ListLiteral l = new ListLiteral();
    Operator e;
    jj_consume_token(STARR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      e = readExpression(c);
                  l.addElement(e);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGSEP:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(ARGSEP);
      e = readExpression(c);
                  l.addElement(e);
    }
    jj_consume_token(EDARR);
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readNewMap(ExpressContext c) throws ParseException, ExpressException {
        MapLiteral l = new MapLiteral();
        StringLiteral sl;
        String k;
    Operator e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTMAP:
      jj_consume_token(STARTMAP);
      break;
    case STARTBLOCK:
      jj_consume_token(STARTBLOCK);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
    case LENTITY:
    case LSTRING:
    case QUOTE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case LENTITY:
        k = readEntityName(c);
        break;
      case LSTRING:
      case QUOTE:
        sl = readStringLiteral(c);
                                          k = sl.getValue();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      e = readExpression(c);
                  l.putElement(k, e);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGSEP:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(ARGSEP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case LENTITY:
        k = readEntityName(c);
        break;
      case LSTRING:
      case QUOTE:
        sl = readStringLiteral(c);
                                          k = sl.getValue();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COLON);
      e = readExpression(c);
                  l.putElement(k, e);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDMAP:
      jj_consume_token(ENDMAP);
      break;
    case ENDBLOCK:
      jj_consume_token(ENDBLOCK);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readNew(ExpressContext c) throws ParseException, ExpressException {
    StringBuilder name = new StringBuilder();
    String cn;
    List<Operator> args = new LinkedList<Operator>();
    Operator a;
    jj_consume_token(NEW);
    cn = readEntityName(c);
       name.append(cn);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      jj_consume_token(DOT);
      cn = readEntityName(c);
        name.append(".").append(cn);
    }
    jj_consume_token(STCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      a = readExpression(c);
        args.add(a);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGSEP:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
        jj_consume_token(ARGSEP);
        a = readExpression(c);
         args.add(a);
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(EDCOMP);
      {if (true) return new NewObject(name.toString(), args);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readValue(ExpressContext c) throws ParseException, ExpressException {
    Operator v;
    v = readValuePrefix(c);
    label_8:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_8;
      }
      v = readValueSuffix(c,v);
    }
      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readValuePrefix(ExpressContext c) throws ParseException, ExpressException {
    Operator p;
    if (jj_2_6(2147483647)) {
      p = readComplex(c);
    } else if (jj_2_7(2147483647)) {
      p = readNewList(c);
    } else if (jj_2_8(2147483647)) {
      p = readNewMap(c);
    } else if (jj_2_9(2147483647)) {
      p = readNew(c);
    } else if (jj_2_10(2147483647)) {
      p = readAction(c);
    } else if (jj_2_11(2147483647)) {
      p = readFunction(c);
    } else if (jj_2_12(2147483647)) {
      p = readLiteral(c);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readValueSuffix(ExpressContext c, Operator l) throws ParseException, ExpressException {
    Operator o;
    if (jj_2_13(2147483647)) {
      o = readMethodInvoke(c,l);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        o = readPropertyInvoke(c,l);
        break;
      case STARR:
        o = readArrayInvoke(c,l);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readPropertyInvoke(ExpressContext c, Operator l) throws ParseException, ExpressException {
    String name;
    jj_consume_token(DOT);
    name = readEntityName(c);
      {if (true) return new PropertyInvoke(l, name);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readArrayInvoke(ExpressContext c, Operator l) throws ParseException, ExpressException {
    Operator r;
    jj_consume_token(STARR);
    r = readExpression(c);
    jj_consume_token(EDARR);
      {if (true) return new ArrayInvoke(l,r);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readMethodInvoke(ExpressContext c, Operator l) throws ParseException, ExpressException {
    String name;
    List<Operator> args = new LinkedList<Operator>();
    Map<String,Operator> namedArgs = new TreeMap<String,Operator>();
    Operator a;
    String argName;
    jj_consume_token(DOT);
    name = readEntityName(c);
    jj_consume_token(STCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      if (jj_2_14(2)) {
        argName = readEntityName(c);
        jj_consume_token(ASSIGNMENT);
        a = readExpression(c);
                        namedArgs.put(argName, a);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUB:
        case BITWISE_NOT:
        case NOT:
        case NOT1:
        case STCOMP:
        case STARR:
        case NEW:
        case IF:
        case IN:
        case VAR:
        case LACTION:
        case COLON:
        case NLINT:
        case NLLONG:
        case NLFLOAT:
        case NLDOUBLE:
        case LBOOLEAN:
        case LNULL:
        case LENTITY:
        case LSTRING:
        case STARTMAP:
        case QUOTE:
        case STARTBLOCK:
          a = readExpression(c);
                        args.add(a);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ARGSEP:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_9;
        }
        jj_consume_token(ARGSEP);
        if (jj_2_15(2)) {
          argName = readEntityName(c);
          jj_consume_token(ASSIGNMENT);
          a = readExpression(c);
                            namedArgs.put(argName, a);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUB:
          case BITWISE_NOT:
          case NOT:
          case NOT1:
          case STCOMP:
          case STARR:
          case NEW:
          case IF:
          case IN:
          case VAR:
          case LACTION:
          case COLON:
          case NLINT:
          case NLLONG:
          case NLFLOAT:
          case NLDOUBLE:
          case LBOOLEAN:
          case LNULL:
          case LENTITY:
          case LSTRING:
          case STARTMAP:
          case QUOTE:
          case STARTBLOCK:
            a = readExpression(c);
                            args.add(a);
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(EDCOMP);
        {if (true) return new MethodInvoke(l, name, args, namedArgs);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readUnary(ExpressContext c) throws ParseException, ExpressException {
    Operator o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case NOT1:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      case NOT1:
        jj_consume_token(NOT1);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      o = readUnary(c);
                  o = new LogicalNot(o);
      break;
    case BITWISE_NOT:
      jj_consume_token(BITWISE_NOT);
      o = readUnary(c);
                  o = new BitwiseNot(o);
      break;
    case SUB:
      jj_consume_token(SUB);
      o = readUnary(c);
                  o = new Sub(null, o);
      break;
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case LACTION:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      o = readValue(c);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readLambda(ExpressContext c) throws ParseException, ExpressException {
    Token arg;
    List<String> args = new LinkedList<String>();
    StatementBlock blk = null;
    Operator op = null;
    jj_consume_token(STCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENTITY:
      arg = jj_consume_token(LENTITY);
              args.add(arg.image);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGSEP:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_10;
      }
      jj_consume_token(ARGSEP);
      arg = jj_consume_token(LENTITY);
              args.add(arg.image);
    }
    jj_consume_token(EDCOMP);
    jj_consume_token(ARROW);
    if (jj_2_16(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTMAP:
        jj_consume_token(STARTMAP);
        break;
      case STARTBLOCK:
        jj_consume_token(STARTBLOCK);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      blk = readStatements(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDMAP:
        jj_consume_token(ENDMAP);
        break;
      case ENDBLOCK:
        jj_consume_token(ENDBLOCK);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case NEW:
      case IF:
      case IN:
      case LACTION:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
        op = readOrExpression(c);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return new Lambda(args, blk, op);}
    throw new Error("Missing return statement in function");
  }

  final private Operator readFunctionReference(ExpressContext c) throws ParseException, ExpressException {
    Token name;
    jj_consume_token(COLON);
    jj_consume_token(COLON);
    name = jj_consume_token(LENTITY);
        // validate the function exists at parse time, even though we don't use it right now.
        loadFunction(name.image, c, this.verify);
        {if (true) return new FunctionReference(name.image);}
    throw new Error("Missing return statement in function");
  }

  final public Operator readExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator o;
    if (jj_2_17(2147483647)) {
      o = readFunctionReference(c);
    } else if (jj_2_18(2147483647)) {
      o = readLambda(c);
    } else if (jj_2_19(2147483647)) {
      o = readAssignment(c);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case NEW:
      case IF:
      case IN:
      case LACTION:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
        o = readOrExpression(c);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Operator readWrappedExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator o;
    jj_consume_token(START_EXPRESSION);
    o = readExpression(c);
    jj_consume_token(END_EXPRESSION);
      {if (true) return new Wrapped(o);}
    throw new Error("Missing return statement in function");
  }

  final public Operator readFullExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator op = null;
    ConcatOperator cat = null;
    Operator ret = null;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_EXPRESSION_TEXT:
      case START_EXPRESSION:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_EXPRESSION_TEXT:
        op = readPlainText(c);
        break;
      case START_EXPRESSION:
        op = readWrappedExpression(c);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            if (ret == null)
            {
                ret = op;
            }
            else
            {
                if (cat == null)
                {
                    cat = new ConcatOperator(ret);
                    ret = cat;
                }
                cat.addOperator(op);
            }
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readTernary(ExpressContext c) throws ParseException, ExpressException {
    Operator o;
    Operator m;
    Operator a;
    o = readOrExpression(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERNARY:
      jj_consume_token(TERNARY);
      m = readTernary(c);
      jj_consume_token(COLON);
      a = readTernary(c);
                  o = new Ternary(o, m, a);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
      {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readAssignment(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    String e;
    Operator r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case LACTION:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      l = readTernary(c);
      break;
    case VAR:
      jj_consume_token(VAR);
      e = readEntityName(c);
                                  l = new Var(e);
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
    case ADDASSIGNMENT:
    case SUBASSIGNMENT:
    case MULASSIGNMENT:
    case DIVASSIGNMENT:
    case POWASSIGNMENT:
    case MODASSIGNMENT:
    case INCASSIGNMENT:
    case DECASSIGNMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCASSIGNMENT:
        jj_consume_token(INCASSIGNMENT);
                          l = new Assignment(l, new Add(l, new IntLiteral(1)));
        break;
      case DECASSIGNMENT:
        jj_consume_token(DECASSIGNMENT);
                          l = new Assignment(l, new Sub(l, new IntLiteral(1)));
        break;
      case ASSIGNMENT:
        jj_consume_token(ASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, r);
        break;
      case POWASSIGNMENT:
        jj_consume_token(POWASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, new Pow(l, r));
        break;
      case DIVASSIGNMENT:
        jj_consume_token(DIVASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, new Div(l, r));
        break;
      case MULASSIGNMENT:
        jj_consume_token(MULASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, new Mul(l, r));
        break;
      case MODASSIGNMENT:
        jj_consume_token(MODASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, new Mod(l, r));
        break;
      case ADDASSIGNMENT:
        jj_consume_token(ADDASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, new Add(l, r));
        break;
      case SUBASSIGNMENT:
        jj_consume_token(SUBASSIGNMENT);
        r = readTernary(c);
                          l = new Assignment(l, new Sub(l, r));
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readOrExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readAndExpression(c);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case OR1:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        break;
      case OR1:
        jj_consume_token(OR1);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      r = readAndExpression(c);
          l = new LogicalOr(l, r);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readAndExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readBitwiseOrExpression(c);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case AND1:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case AND1:
        jj_consume_token(AND1);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      r = readBitwiseOrExpression(c);
        l = new LogicalAnd(l,r);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readBitwiseOrExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readBitwiseXorExpression(c);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_OR:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_14;
      }
      jj_consume_token(BITWISE_OR);
      r = readBitwiseXorExpression(c);
        l = new BitwiseOr(l, r);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readBitwiseXorExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readBitwiseAndExpression(c);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_XOR:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_15;
      }
      jj_consume_token(BITWISE_XOR);
      r = readBitwiseAndExpression(c);
        l = new BitwiseXor(l, r);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readBitwiseAndExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readEqualityExpression(c);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITWISE_AND:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_16;
      }
      jj_consume_token(BITWISE_AND);
      r = readEqualityExpression(c);
        l = new BitwiseAnd(l, r);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readEqualityExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readCompareExpression(c);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case EQ1:
      case EQ2:
      case NE:
      case NE1:
      case NE2:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case EQ1:
      case EQ2:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        case EQ1:
          jj_consume_token(EQ1);
          break;
        case EQ2:
          jj_consume_token(EQ2);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readCompareExpression(c);
         l = new Equals(l,r);
        break;
      case NE:
      case NE1:
      case NE2:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NE:
          jj_consume_token(NE);
          break;
        case NE1:
          jj_consume_token(NE1);
          break;
        case NE2:
          jj_consume_token(NE2);
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readCompareExpression(c);
         l = new NotEquals(l,r);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readCompareExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readBitShiftExpression(c);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GT1:
      case LT:
      case LT1:
      case GTEQ:
      case GTEQ1:
      case LTEQ:
      case LTEQ1:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_18;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GT1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          break;
        case GT1:
          jj_consume_token(GT1);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readBitShiftExpression(c);
       l = new GT(l,r);
        break;
      case LT:
      case LT1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case LT1:
          jj_consume_token(LT1);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readBitShiftExpression(c);
       l = new LT(l,r);
        break;
      case GTEQ:
      case GTEQ1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GTEQ:
          jj_consume_token(GTEQ);
          break;
        case GTEQ1:
          jj_consume_token(GTEQ1);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readBitShiftExpression(c);
       l = new GTEQ(l,r);
        break;
      case LTEQ:
      case LTEQ1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LTEQ:
          jj_consume_token(LTEQ);
          break;
        case LTEQ1:
          jj_consume_token(LTEQ1);
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readBitShiftExpression(c);
       l = new LTEQ(l,r);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readBitShiftExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readAddExpression(c);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITSHIFT_LEFT:
      case BITSHIFT_RIGHT:
      case BITSHIFT_URIGHT:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BITSHIFT_LEFT:
        jj_consume_token(BITSHIFT_LEFT);
        r = readAddExpression(c);
             l = new BitshiftLeft(l,r);
        break;
      case BITSHIFT_RIGHT:
        jj_consume_token(BITSHIFT_RIGHT);
        r = readAddExpression(c);
             l = new BitshiftRight(l,r);
        break;
      case BITSHIFT_URIGHT:
        jj_consume_token(BITSHIFT_URIGHT);
        r = readAddExpression(c);
             l = new BitshiftUnsignedRight(l,r);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readAddExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readMulExpression(c);
    label_20:
    while (true) {
      if (jj_2_20(2)) {
        ;
      } else {
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        r = readMulExpression(c);
                     l = new Add(l,r);
        break;
      case SUB:
        jj_consume_token(SUB);
        r = readMulExpression(c);
                     l = new Sub(l,r);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readMulExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readPowExpression(c);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case DIV1:
      case MOD:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        r = readPowExpression(c);
        l = new Mul(l,r);
        break;
      case DIV:
      case DIV1:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIV:
          jj_consume_token(DIV);
          break;
        case DIV1:
          jj_consume_token(DIV1);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        r = readPowExpression(c);
        l = new Div(l,r);
        break;
      case MOD:
        jj_consume_token(MOD);
        r = readPowExpression(c);
        l = new Mod(l,r);
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final private Operator readPowExpression(ExpressContext c) throws ParseException, ExpressException {
    Operator l;
    Operator r;
    l = readUnary(c);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POW:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_22;
      }
      jj_consume_token(POW);
      r = readUnary(c);
       l = new Pow(l,r);
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public StatementBlock readFullStatements(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock ret = new StatementBlock();
    Operator op;
    StatementBlock bl;
    PlainWriteStatement pls;
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_EXPRESSION_TEXT:
      case START_EXPRESSION:
      case START_SCRIPT:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NON_EXPRESSION_TEXT:
        pls = readPlainWriteStatement(c);
              ret.getStatements().add(pls);
        break;
      case START_EXPRESSION:
        op = readWrappedExpression(c);
              ret.getStatements().add(new WriteStatement(op));
        break;
      case START_SCRIPT:
        bl = readWrappedStatements(c);
              ret.getStatements().add(bl);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public StatementBlock readWrappedStatements(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock r = new StatementBlock(true);
    Statement s;
    jj_consume_token(START_SCRIPT);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case STATEMENT:
      case NEW:
      case RETURN:
      case IF:
      case IN:
      case FOR:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case EXPORT:
      case INCLUDE:
      case FUNCTION:
      case VAR:
      case LACTION:
      case COLON:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_24;
      }
      s = readStatement(c);
              r.getStatements().add(s);
    }
    jj_consume_token(END_SCRIPT);
      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public StatementBlock readStatements(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock r = new StatementBlock(false);
    Statement s;
    Operator op;
    PlainWriteStatement pls;
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case STATEMENT:
      case NEW:
      case RETURN:
      case IF:
      case IN:
      case FOR:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case EXPORT:
      case INCLUDE:
      case FUNCTION:
      case VAR:
      case LACTION:
      case COLON:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
      case END_SCRIPT:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case STATEMENT:
      case NEW:
      case RETURN:
      case IF:
      case IN:
      case FOR:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case EXPORT:
      case INCLUDE:
      case FUNCTION:
      case VAR:
      case LACTION:
      case COLON:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
        s = readStatement(c);
              r.getStatements().add(s);
        break;
      case END_SCRIPT:
        jj_consume_token(END_SCRIPT);
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NON_EXPRESSION_TEXT:
          case START_EXPRESSION:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_26;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NON_EXPRESSION_TEXT:
            pls = readPlainWriteStatement(c);
                      r.getStatements().add(pls);
            break;
          case START_EXPRESSION:
            op = readWrappedExpression(c);
                      r.getStatements().add(new WriteStatement(op));
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(START_SCRIPT);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final private Statement readStatement(ExpressContext c) throws ParseException, ExpressException {
    Statement s;
    if (jj_2_21(2147483647)) {
      s = readIfStatement(c);
    } else if (jj_2_22(2147483647)) {
      s = readForEachStatement(c);
    } else if (jj_2_23(2147483647)) {
      s = readForStatement(c);
    } else if (jj_2_24(2147483647)) {
      s = readWhileStatement(c);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
        s = readBreakStatement(c);
        break;
      case CONTINUE:
        s = readContinueStatement(c);
        break;
      case RETURN:
        s = readReturnStatement(c);
        break;
      case EXPORT:
        s = readExportStatement(c);
        break;
      case INCLUDE:
        s = readIncludeStatement(c);
        break;
      case FUNCTION:
        s = readFunctionStatement(c);
        break;
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case STATEMENT:
      case NEW:
      case IF:
      case IN:
      case VAR:
      case LACTION:
      case COLON:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
        s = readDefaultStatement(c);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private Statement readIfStatement(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock tb;
    StatementBlock fb = null;
    StatementBlock eib;
    Statement st;
    Operator eit;
    List<IfStatement.ElseIfStatement> eis = new LinkedList<IfStatement.ElseIfStatement>();
    Operator t;
    jj_consume_token(IF);
    jj_consume_token(STCOMP);
    t = readExpression(c);
    jj_consume_token(EDCOMP);
    if (jj_2_25(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STARTMAP:
        jj_consume_token(STARTMAP);
        break;
      case STARTBLOCK:
        jj_consume_token(STARTBLOCK);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tb = readStatements(c);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENDMAP:
        jj_consume_token(ENDMAP);
        break;
      case ENDBLOCK:
        jj_consume_token(ENDBLOCK);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
      case BITWISE_NOT:
      case NOT:
      case NOT1:
      case STCOMP:
      case STARR:
      case STATEMENT:
      case NEW:
      case RETURN:
      case IF:
      case IN:
      case FOR:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case EXPORT:
      case INCLUDE:
      case FUNCTION:
      case VAR:
      case LACTION:
      case COLON:
      case NLINT:
      case NLLONG:
      case NLFLOAT:
      case NLDOUBLE:
      case LBOOLEAN:
      case LNULL:
      case LENTITY:
      case LSTRING:
      case STARTMAP:
      case QUOTE:
      case STARTBLOCK:
        st = readStatement(c);
                          tb = new StatementBlock(st);
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_27:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      jj_consume_token(STCOMP);
      eit = readExpression(c);
      jj_consume_token(EDCOMP);
      if (jj_2_27(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STARTMAP:
          jj_consume_token(STARTMAP);
          break;
        case STARTBLOCK:
          jj_consume_token(STARTBLOCK);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        eib = readStatements(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENDMAP:
          jj_consume_token(ENDMAP);
          break;
        case ENDBLOCK:
          jj_consume_token(ENDBLOCK);
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUB:
        case BITWISE_NOT:
        case NOT:
        case NOT1:
        case STCOMP:
        case STARR:
        case STATEMENT:
        case NEW:
        case RETURN:
        case IF:
        case IN:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case EXPORT:
        case INCLUDE:
        case FUNCTION:
        case VAR:
        case LACTION:
        case COLON:
        case NLINT:
        case NLLONG:
        case NLFLOAT:
        case NLDOUBLE:
        case LBOOLEAN:
        case LNULL:
        case LENTITY:
        case LSTRING:
        case STARTMAP:
        case QUOTE:
        case STARTBLOCK:
          st = readStatement(c);
                                  eib = new StatementBlock(st);
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          eis.add(new IfStatement.ElseIfStatement(eit, eib));
    }
    if (jj_2_29(2)) {
      jj_consume_token(ELSE);
      if (jj_2_28(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STARTMAP:
          jj_consume_token(STARTMAP);
          break;
        case STARTBLOCK:
          jj_consume_token(STARTBLOCK);
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        fb = readStatements(c);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENDMAP:
          jj_consume_token(ENDMAP);
          break;
        case ENDBLOCK:
          jj_consume_token(ENDBLOCK);
          break;
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUB:
        case BITWISE_NOT:
        case NOT:
        case NOT1:
        case STCOMP:
        case STARR:
        case STATEMENT:
        case NEW:
        case RETURN:
        case IF:
        case IN:
        case FOR:
        case WHILE:
        case BREAK:
        case CONTINUE:
        case EXPORT:
        case INCLUDE:
        case FUNCTION:
        case VAR:
        case LACTION:
        case COLON:
        case NLINT:
        case NLLONG:
        case NLFLOAT:
        case NLDOUBLE:
        case LBOOLEAN:
        case LNULL:
        case LENTITY:
        case LSTRING:
        case STARTMAP:
        case QUOTE:
        case STARTBLOCK:
          st = readStatement(c);
                                  fb = new StatementBlock(st);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
      {if (true) return new IfStatement(t, tb, eis, fb);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readWhileStatement(ExpressContext c) throws ParseException, ExpressException {
    Operator t;
    StatementBlock b;
    jj_consume_token(WHILE);
    jj_consume_token(STCOMP);
    t = readExpression(c);
    jj_consume_token(EDCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTMAP:
      jj_consume_token(STARTMAP);
      break;
    case STARTBLOCK:
      jj_consume_token(STARTBLOCK);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    b = readStatements(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDMAP:
      jj_consume_token(ENDMAP);
      break;
    case ENDBLOCK:
      jj_consume_token(ENDBLOCK);
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new WhileStatement(t,b);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readForStatement(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock b;
    Operator a;
    Operator t;
    Operator i;
    jj_consume_token(FOR);
    jj_consume_token(STCOMP);
    a = readAssignment(c);
    jj_consume_token(STATEMENT);
    t = readExpression(c);
    jj_consume_token(STATEMENT);
    i = readAssignment(c);
    jj_consume_token(EDCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTMAP:
      jj_consume_token(STARTMAP);
      break;
    case STARTBLOCK:
      jj_consume_token(STARTBLOCK);
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    b = readStatements(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDMAP:
      jj_consume_token(ENDMAP);
      break;
    case ENDBLOCK:
      jj_consume_token(ENDBLOCK);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new ForStatement(a, t, i, b);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readForEachStatement(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock blk;
    String var;
    Operator col;
    jj_consume_token(FOR);
    jj_consume_token(STCOMP);
    var = readEntityName(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IN:
      jj_consume_token(IN);
      break;
    case COLON:
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    col = readExpression(c);
    jj_consume_token(EDCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTMAP:
      jj_consume_token(STARTMAP);
      break;
    case STARTBLOCK:
      jj_consume_token(STARTBLOCK);
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    blk = readStatements(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDMAP:
      jj_consume_token(ENDMAP);
      break;
    case ENDBLOCK:
      jj_consume_token(ENDBLOCK);
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new ForEachStatement(var, col, blk);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readFunctionStatement(ExpressContext c) throws ParseException, ExpressException {
    StatementBlock blk;
    Token name;
    Token arg;
    List<String> args = new LinkedList<String>();
    jj_consume_token(FUNCTION);
    name = jj_consume_token(LENTITY);
    jj_consume_token(STCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENTITY:
      arg = jj_consume_token(LENTITY);
          args.add(arg.image);
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ARGSEP:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_28;
      }
      jj_consume_token(ARGSEP);
      arg = jj_consume_token(LENTITY);
          args.add(arg.image);
    }
    jj_consume_token(EDCOMP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STARTMAP:
      jj_consume_token(STARTMAP);
      break;
    case STARTBLOCK:
      jj_consume_token(STARTBLOCK);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    blk = readStatements(c);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENDMAP:
      jj_consume_token(ENDMAP);
      break;
    case ENDBLOCK:
      jj_consume_token(ENDBLOCK);
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        FunctionStatement func = new FunctionStatement(name.image, args, blk);
        func.register(c);
        {if (true) return func;}
    throw new Error("Missing return statement in function");
  }

  final private IncludeStatement readIncludeStatement(ExpressContext c) throws ParseException, ExpressException {
    Operator o;
    jj_consume_token(INCLUDE);
    o = readExpression(c);
    jj_consume_token(STATEMENT);
      {if (true) return new IncludeStatement(o);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readDefaultStatement(ExpressContext c) throws ParseException, ExpressException {
    Operator o = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      o = readExpression(c);
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    jj_consume_token(STATEMENT);
      {if (true) return new DefaultStatement(o);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readBreakStatement(ExpressContext c) throws ParseException, ExpressException {
    jj_consume_token(BREAK);
    jj_consume_token(STATEMENT);
      {if (true) return new BreakStatement();}
    throw new Error("Missing return statement in function");
  }

  final private Statement readContinueStatement(ExpressContext c) throws ParseException, ExpressException {
    jj_consume_token(CONTINUE);
    jj_consume_token(STATEMENT);
      {if (true) return new ContinueStatement();}
    throw new Error("Missing return statement in function");
  }

  final private Statement readReturnStatement(ExpressContext c) throws ParseException, ExpressException {
    Operator o = null;
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case BITWISE_NOT:
    case NOT:
    case NOT1:
    case STCOMP:
    case STARR:
    case NEW:
    case IF:
    case IN:
    case VAR:
    case LACTION:
    case COLON:
    case NLINT:
    case NLLONG:
    case NLFLOAT:
    case NLDOUBLE:
    case LBOOLEAN:
    case LNULL:
    case LENTITY:
    case LSTRING:
    case STARTMAP:
    case QUOTE:
    case STARTBLOCK:
      o = readExpression(c);
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    jj_consume_token(STATEMENT);
      {if (true) return new ReturnStatement(o);}
    throw new Error("Missing return statement in function");
  }

  final private Statement readExportStatement(ExpressContext c) throws ParseException, ExpressException {
    String varName;
    jj_consume_token(EXPORT);
    varName = readEntityName(c);
    jj_consume_token(STATEMENT);
      {if (true) return new ExportStatement(varName);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(BITSHIFT_RIGHT)) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(BITSHIFT_LEFT)) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(QUOTE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENDQUOTE)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(LSTRING)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_193()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LBOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(STCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(EDCOMP)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(NLDOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(NLFLOAT)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(STARR)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(EDARR)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(NLLONG)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(NLINT)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(INCLUDE)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(STATEMENT)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(NON_EXPRESSION_TEXT)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(BITWISE_AND)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(ARGSEP)) return true;
    if (jj_scan_token(LENTITY)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(LENTITY)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(BITWISE_XOR)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_175()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(LENTITY)) return true;
    if (jj_scan_token(STCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EDCOMP)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_177()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(BITWISE_OR)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(ARGSEP)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_166()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(STCOMP)) return true;
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    if (jj_3R_53()) return true;
    if (jj_scan_token(EDCOMP)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(STCOMP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(EDCOMP)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_156()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(ARGSEP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(STCOMP)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(STATEMENT)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(STATEMENT)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(EDCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(SUBASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(ADDASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(MODASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(STCOMP)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(EDCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(MULASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(DIVASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(ARGSEP)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(POWASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(DECASSIGNMENT)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(INCASSIGNMENT)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(STARR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EDARR)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(STCOMP)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(EDCOMP)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(STCOMP)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(EDCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(ARGSEP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(TERNARY)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(STCOMP)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(EDCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_104()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(LACTION)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(STCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_scan_token(EDCOMP)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(END_SCRIPT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(START_SCRIPT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(ARGSEP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(START_EXPRESSION)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(END_EXPRESSION)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(LENTITY)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    if (jj_scan_token(STCOMP)) return true;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(EDCOMP)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    if (jj_3R_39()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ARGSEP)) return true;
    if (jj_scan_token(LENTITY)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LENTITY)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(POW)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(STCOMP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EDCOMP)) return true;
    if (jj_scan_token(ARROW)) return true;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(BITWISE_NOT)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LNULL)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(ASSIGNMENT)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(HEXESC)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(ARGSEP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(CNTRLESC)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(BITSHIFT_URIGHT)) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ELParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[99];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x1000,0x1000,0x1000,0x0,0x1000,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x1000,0x400,0x1000,0x0,0x1000,0x1000,0x0,0x1000,0x0,0x0,0x0,0x0,0x1000,0x1000,0x6,0x6,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f80000,0x380000,0x1c00000,0x1f80000,0xfe000000,0x6000000,0x18000000,0x60000000,0x80000000,0xfe000000,0x0,0x0,0x1800,0x2e000,0xc000,0x2e000,0x10000,0xe,0xe,0x1000,0x1000,0x6,0x6,0x1000,0x1000,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40027010,0x10000,0x40027010,0x40027010,0x40027010,0x10000,0x40027010,0x40027010,0x40027010,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x40027010,0x20000,0x40027010,0x10000,0x40027010,0x40027010,0x3000,0x40027010,0x0,0x10000,0x0,0x0,0x40027010,0x40027010,0x0,0x0,0x0,0x40027010,0xff80000,0xff80000,0x300,0x300,0xc00,0xc00,0x2,0x4,0x8,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x1,0xe0,0xe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0027010,0xe0027010,0x0,0x0,0xe0027010,0xe0027010,0x0,0x0,0xe0027010,0x0,0x0,0xe0027010,0x0,0x0,0xe0027010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x40027010,0x40027010,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x11000000,0x0,0x100004,0x3c000,0x111fc004,0x100005,0x331fdc05,0x0,0x331fdc05,0x331fdc05,0x331fdc05,0x0,0x331fdc05,0x331fdc05,0x331fdc05,0x0,0x22000000,0x11100004,0x11100004,0x0,0x11100004,0x44000000,0x0,0x0,0x331fdc05,0x0,0x331fdc05,0x0,0x331fdc05,0x331fdc05,0x0,0x331fc805,0x100000,0x0,0x22000000,0x44000000,0x331fc805,0x331fc805,0x0,0x0,0x2000,0x331fcc05,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x331fdffd,0xb31fdffd,0x0,0x0,0xb31fdffd,0x331fdfe5,0x22000000,0x44000000,0x331fdffd,0x22000000,0x44000000,0x331fdffd,0x22000000,0x44000000,0x331fdffd,0x22000000,0x44000000,0x22000000,0x44000000,0x1004,0x22000000,0x44000000,0x100000,0x0,0x22000000,0x44000000,0x331fdc05,0x331fdc05,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x980,0x0,0x980,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[29];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ELParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ELParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ELParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ELParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ELParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ELParser(ELParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ELParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 99; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[108];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 99; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 108; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 29; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
